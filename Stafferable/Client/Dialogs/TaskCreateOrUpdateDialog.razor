@inject ITaskServiceClient TaskService
@inject IAuthServiceClient AuthService
@inject IToaster Toaster
@inject IDialogService DialogService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Align="Align.Center">
            <MudIcon Icon="@Icons.Material.Filled.Task" Class="mb-1" />
            @project.Number @project.Name
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.subtitle1" Align="Align.Center">@titleText</MudText>
        <MudForm>
            <MudTextField T="string" Label="Title" Required="true" Variant="Variant.Filled" @bind-Value="task.Title" />
            <MudTextField T="string" Label="Description" Lines="4" Required="true" Variant="Variant.Filled" @bind-Value="task.Description" />
            <MudAutocomplete T="int?" Label="Assigned to?" @bind-Value="task.AssignedToId" SearchFunc="@SearchFunc"
                             Dense="true" Variant="Variant.Filled" Clearable="true" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default"
                             ToStringFunc="@(userId => DisplayUser(userId))">
                <NoItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        No users found
                    </MudText>
                </NoItemsTemplate>
            </MudAutocomplete>

            <MudDatePicker Culture="@CultureInfo.GetCultureInfo("pl-pl")" Label="Deadline" Variant="Variant.Filled" DisableToolbar="true" @bind-Date="task.DeadlineDate" />
            <MudSelect Dense="true" T="string" Label="Priority" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="task.Priority">
                @foreach (var level in priorityLevels)
                {
                    <MudSelectItem T="string" Value="@level">@level</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <AuthorizeView>
            @if (task.TaskItemId != Guid.Empty && @context.User.FindFirst(ClaimTypes.Role).Value == "Admin")
            {
                <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="OpenDeleteTaskDialog">Delete</MudButton>
            }
        </AuthorizeView>
        <MudSpacer />
        <MudButton Color="@btnColor" Variant="Variant.Filled" OnClick="Submit">@btnText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public TaskItem task { get; set; } = new TaskItem();
    [Parameter] public Project project { get; set; } = new Project();

    string titleText = "";
    string btnText = "";
    Color btnColor = Color.Success;
    List<UserGet> users = new List<UserGet>();

    private string[] priorityLevels =
        {
        "Low", "Medium", "High"
    };

    protected override async Task OnParametersSetAsync()
    {
        users = (await AuthService.GetAllUsers()).Data;
        if (task.TaskItemId == Guid.Empty)
        {
            titleText = "New Task";
            btnText = "Add";
        }
        else
        {
            titleText = "Update Task Details";
            btnColor = Color.Warning;
            btnText = "Update";
        }
    }

    void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        if (task.TaskItemId == Guid.Empty)
        {
            task.ProjectId = project.ProjectId;
            var result = await TaskService.PostTask(task);
            if (result.Success == true)
            {
                Toaster.Success(result.Message);
            }
            else
            {
                Toaster.Error(result.Message);
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            task.ProjectId = project.ProjectId;
            await TaskService.UpdateTask(task);
            Toaster.Success("Task Updated!");
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    async Task OpenDeleteTaskDialog()
    {
        var parameters = new DialogParameters { ["taskItem"] = task };
        var options = new DialogOptions { FullWidth = true, Position = DialogPosition.BottomCenter };
        var dialog = DialogService.Show<TaskDeleteDialog>("Delete Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            MudDialog.Close(DialogResult.Ok(true));
            Toaster.Success("Task Deleted");
        }
    }

    private async Task<IEnumerable<int?>> SearchFunc(string inputValue)
    {
        if (string.IsNullOrEmpty(inputValue))
            return users.Select(x => (int?)x.UserId);
        return users.Where(x => x.FName.Contains(inputValue, StringComparison.InvariantCultureIgnoreCase) || 
            x.LName.Contains(inputValue, StringComparison.InvariantCultureIgnoreCase)).Select(x => (int?)x.UserId);
    }

    private string DisplayUser(int? assignedUserId)
    {
        var user = users.FirstOrDefault(i => i.UserId == assignedUserId);
        return string.Join(", ", $"{user.FName} {user.LName}");
    }

}
