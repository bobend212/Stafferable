@page "/my-tasks"
@inject ITaskServiceClient TaskService
@inject IDialogService DialogService
@inject IToaster Toaster

<div style="display: flex; align-items: center; justify-content: space-between">
    <div style="display: inline-block">
        <div>
            <MudText Typo="Typo.h4" Class="mb-2">My Tasks</MudText>
        </div>
        <div>
            <MudSwitch ThumbIcon="@(ShowCompletedTasks==true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(ShowCompletedTasks==true ? Color.Success : Color.Error)"
                       Label="@(ShowCompletedTasks ? "Hide Completed" : "Show Completed")" Checked="@ShowCompletedTasks" CheckedChanged="@((bool value) => OnToggledChanged(value))" />
        </div>
    </div>

    <div style="display: inline-block">
        <MudFab Color="Color.Dark" StartIcon="@Icons.Outlined.Add" Label="New Task" IconSize="Size.Small" OnClick="@((e) => OpenCrateUpdateTaskDialog())" />
    </div>
</div>

<MudTable Items="@tasks.OrderBy(x => x.DeadlineDate)" Hover="true" Elevation="0" Dense="true" Bordered="true">
    <HeaderContent>
        <MudTh Style="font-weight: bold">#</MudTh>
        <MudTh Style="font-weight: bold"><MudTableSortLabel SortBy="new Func<TaskItemGet, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
        <MudTh Style="font-weight: bold">Description</MudTh>
        <MudTh Style="font-weight: bold">Due Date</MudTh>
        <MudTh Style="font-weight: bold">Complete Date</MudTh>
        <MudTh Style="font-weight: bold">Project</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="width: 10px">
            <MudCheckBox @bind-Checked="@context.IsComplete" Dense="true" UnCheckedColor="Color.Warning" Color="Color.Success" CheckedIcon="@Icons.Material.Filled.CheckCircle" UncheckedIcon="@Icons.Material.Filled.RadioButtonUnchecked"></MudCheckBox>
        </MudTd>
        <MudTd>@context.Title</MudTd>
        <MudTd>@context.Description</MudTd>
        <MudTd>@context.DeadlineDate?.ToString("dd MMM yyyy")</MudTd>
        <MudTd>@context.CompleteDate?.ToString("dd MMM yyyy")</MudTd>
        <MudTd>@context.Project?.Number @context.Project?.Name</MudTd>
    </RowTemplate>
</MudTable>

@code {
    List<TaskItemGet> tasks = new List<TaskItemGet>();

    public bool ShowCompletedTasks { get; set; }

    protected override async Task OnInitializedAsync()
    {
        tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.Where(x => x.IsComplete == false).ToList();
    }

    public async Task OnToggledChanged(bool toggled)
    {
        ShowCompletedTasks = toggled;

        if (!ShowCompletedTasks)
        {
            tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.Where(x => x.IsComplete == false).ToList();
        }
        else
        {
            tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.Where(x => x.IsComplete == true).ToList();
        }
    }

    async Task OpenCrateUpdateTaskDialog()
    {
        var options = new DialogOptions { FullWidth = true, Position = DialogPosition.TopCenter };

        var dialog = DialogService.Show<MyTasksCreateOrUpdateDialog>("New Task", options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (!ShowCompletedTasks)
            {
                tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.Where(x => x.IsComplete == false).ToList();
            }
            else
            {
                tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.Where(x => x.IsComplete == true).ToList();
            };
        }
    }
}
