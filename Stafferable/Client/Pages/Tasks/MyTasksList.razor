@page "/my-tasks"
@inject ITaskServiceClient TaskService
@inject IDialogService DialogService
@inject IToaster Toaster

<div style="display: flex; align-items: center; justify-content: space-between">
    <div style="display: inline-block">
        <MudText Typo="Typo.h4" Class="mb-2">My Tasks</MudText>
    </div>

    <div style="display: inline-block; position: sticky">
        <MudPaper Class="p-1 mr-2" style="display: inline-block">
            <MudText style="display: inline" Typo="Typo.body1">High <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.Flag" Color="Color.Error" Size="Size.Small" /> </MudText>
            <MudText style="display: inline" Typo="Typo.body1">Medium <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.Flag" Color="Color.Warning" Size="Size.Small" /> </MudText>
            <MudText style="display: inline" Typo="Typo.body1">Low <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.Flag" Color="Color.Default" Size="Size.Small" /> </MudText>
            <MudText style="display: inline" Typo="Typo.body1">Deadline <MudIcon Icon="@Icons.Material.Filled.NotificationImportant" Color="Color.Error" Size="Size.Small" /> </MudText>
        </MudPaper>

        <MudSwitch Style="width: 200px" ThumbIcon="@(ShowCompletedTasks==true ? Icons.Material.Filled.FilterAlt : Icons.Material.Filled.FilterAltOff)" ThumbIconColor="@(ShowCompletedTasks==true ? Color.Success : Color.Error)"
                   Label="@(ShowCompletedTasks ? "Hide Completed" : "Show Completed")" Checked="@ShowCompletedTasks" CheckedChanged="@((bool value) => OnToggledChanged(value))" />

        <MudFab Color="Color.Dark" StartIcon="@Icons.Outlined.Add" Size="Size.Small" OnClick="@((e) => OpenCrateUpdateTaskDialog())" />
    </div>
</div>

<MudTable Items="@tasks" Hover="true" Elevation="0" Dense="true" Bordered="true" RowsPerPage="20">
    <HeaderContent>
        <MudTh Style="font-weight: bold">#</MudTh>
        <MudTh Style="font-weight: bold"><MudTableSortLabel SortBy="new Func<TaskItemGet, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
        <MudTh Style="font-weight: bold; width: 25rem">Description</MudTh>
        <MudTh Style="font-weight: bold">Due Date</MudTh>
        <MudTh Style="font-weight: bold">Complete Date</MudTh>
        <MudTh Style="font-weight: bold">Project</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="width: 10px">
            <MudCheckBox @onclick="(e) => CompleteTask(context, e)" @bind-Checked="@context.IsComplete" Dense="true" UnCheckedColor="Color.Default" Color="Color.Success" CheckedIcon="@Icons.Material.Filled.CheckCircle" UncheckedIcon="@Icons.Material.Filled.RadioButtonUnchecked"></MudCheckBox>
        </MudTd>
        <MudTd>
            <div style="display: flex; justify-content: flex-start; align-items: center;">
                @if (context.Priority == "High")
                {
                    <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.Flag" Color="Color.Error" Size="Size.Small" />
                }
                else if (context.Priority == "Medium")
                {
                    <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.Flag" Color="Color.Warning" Size="Size.Small" />
                }
                else if (context.Priority == "Low")
                {
                    <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.Flag" Color="Color.Default" Size="Size.Small" />
                }
                @context.Title
            </div>
        </MudTd>
        <MudTd>@context.Description</MudTd>
        <MudTd>
            <div style="display: flex; justify-content: space-between; align-items: center">
                @context.DeadlineDate?.ToString("dd MMM yyyy")
                @if (context.DeadlineDate <= DateTime.Now && context.IsComplete != true)
                {
                    <MudIcon Icon="@Icons.Material.Filled.NotificationImportant" Color="Color.Error" Size="Size.Small" />
                }
            </div>
        </MudTd>
        <MudTd>@context.CompleteDate?.ToString("dd MMM yyyy")</MudTd>
        <MudTd>@context.Project?.Number @context.Project?.Name</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Tasks not found.</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="Tasks per page:" PageSizeOptions="new int[] {20, 30, 50}" />
    </PagerContent>
</MudTable>

@code {
    List<TaskItemGet> tasks = new List<TaskItemGet>();

    public bool ShowCompletedTasks { get; set; }

    protected override async Task OnInitializedAsync()
    {
        tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.Where(x => x.IsComplete == false).OrderBy(x => x.DeadlineDate).ToList();
    }

    public async Task OnToggledChanged(bool toggled)
    {
        ShowCompletedTasks = toggled;

        if (!ShowCompletedTasks)
        {
            tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.Where(x => x.IsComplete == false).OrderBy(x => x.DeadlineDate).ToList();
        }
        else
        {
            tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.OrderBy(x => x.IsComplete).ThenBy(x => x.DeadlineDate).ToList();
        }
    }

    async Task OpenCrateUpdateTaskDialog()
    {
        var options = new DialogOptions { FullWidth = true, Position = DialogPosition.TopCenter };

        var dialog = DialogService.Show<MyTasksCreateOrUpdateDialog>("New Task", options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (!ShowCompletedTasks)
            {
                tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.Where(x => x.IsComplete == false).OrderBy(x => x.DeadlineDate).ToList();
            }
            else
            {
                tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.OrderBy(x => x.IsComplete).ThenBy(x => x.DeadlineDate).ToList();
            }
        }
    }

    async Task CompleteTask(TaskItemGet taskSelected, object checkedValue)
    {
        var taskItem = new TaskItem
            {
                TaskItemId = taskSelected.TaskItemId
            };
        await TaskService.CompleteTask(taskItem);
        if (!ShowCompletedTasks)
        {
            tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.Where(x => x.IsComplete == false).OrderBy(x => x.DeadlineDate).ToList();
        }
        else
        {
            tasks = (await TaskService.GetAllTasksByLoggedUser()).Data.OrderBy(x => x.IsComplete).ThenBy(x => x.DeadlineDate).ToList();
        }
        Toaster.Success($"Task Completed");
    }
}
