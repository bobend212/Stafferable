@page "/timesheet"
@inject ITimesheetCardServiceClient TimesheetCardService
@inject IToaster Toaster
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@attribute [Authorize]

<div class="container">
    <h3>Timesheets</h3>
    <MudForm>
        <div class="row mb-3">

            <div class="col-auto">
                <MudTextField @bind-Value="request.CustomName" Label="Name" Variant="Variant.Text"></MudTextField>
            </div>
            <div class="col-auto">
                <MudDateRangePicker Culture="@CultureInfo.GetCultureInfo("pl-pl")" @ref="_picker" Label="Date Range" @bind-DateRange="_dateRange" ShowWeekNumbers="true" DisableToolbar="true">
                    <PickerActions>
                        <MudButton Class=" mr-auto align-self-start" OnClick="@(() => _picker.Clear())">
                            Clear
                        </MudButton>
                        <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                    </PickerActions>
                </MudDateRangePicker>
            </div>

            <div class="col-auto" style="display:flex; align-items: flex-end">
                <MudButton StartIcon="@Icons.Material.Filled.AddBox" IconColor="Color.Dark" OnClick="PostTimesheetCard" Variant="Variant.Filled" Color="Color.Tertiary">New Timesheet</MudButton>
            </div>
        </div>
    </MudForm>

    <hr />
    @if (timesheets != null)
    {
        <MudPaper Elevation="4">
            <MudTable Items="@timesheets" Dense="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Date Range</MudTh>
                    <MudTh>Date Created</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Hours</MudTh>
                    <MudTh>Records</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.CustomName</MudTd>
                    <MudTd>@context.StartDate?.ToString("dd/MMM/yyyy") - @context.EndDate?.ToString("dd/MMM/yyyy")</MudTd>
                    <MudTd>@context.DateCreated</MudTd>
                    <MudTd>@context.Status</MudTd>
                    <MudTd>@context.TotalHours</MudTd>
                    <MudTd>@context.TimesheetRecords.Count</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Color="Color.Success" Size="Size.Medium" OnClick="@((e) => ShowCardInfo(context.TimesheetCardId))"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.ModeEdit" Color="Color.Warning" Size="Size.Medium"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium" OnClick="@((e) => OpenDeleteDialog(@context))"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    }
    else
    {
        <h2>@result.Message</h2>
    }

</div>

@code {
    MudDateRangePicker _picker;
    DateRange _dateRange = new DateRange();
    List<TimesheetCard> timesheets = new List<TimesheetCard>();
    ServiceResponse<List<TimesheetCard>> result;
    TimesheetCardPost request = new TimesheetCardPost();

    protected override async Task OnInitializedAsync()
    {
        result = await TimesheetCardService.GetTimesheetCardsByLoggedUser();
        if (result != null)
        {
            timesheets = (await TimesheetCardService.GetTimesheetCardsByLoggedUser()).Data;
        }
    }

    private async Task PostTimesheetCard()
    {
        request.Status = "not approved";
        request.StartDate = _dateRange.Start;
        request.EndDate = _dateRange.End;
        var result = await TimesheetCardService.PostTimesheetCard(request);
        Toaster.Success(result.Message);
        timesheets = (await TimesheetCardService.GetTimesheetCardsByLoggedUser()).Data;
    }

    async Task ShowCardInfo(Guid cardId)
    {
        NavigationManager.NavigateTo($"timesheet/{cardId}/records");
    }

    async Task OpenDeleteDialog(TimesheetCard timesheetCard)
    {
        var parameters = new DialogParameters { ["timesheetCard"] = timesheetCard };
        var options = new DialogOptions { FullWidth = true };

        var dialog = DialogService.Show<TimesheetCardDeleteDialog>("Delete Timesheet Card", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            timesheets = (await TimesheetCardService.GetTimesheetCardsByLoggedUser()).Data;
            Toaster.Success("Timesheet Removed");
        }
    }
}
