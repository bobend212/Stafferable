@page "/change-password"
@inject IAuthServiceClient AuthService
@inject NavigationManager NavigationManager
@inject IToaster Toaster
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="container">


    <h3>Change Password</h3>

    <EditForm Model="request" OnValidSubmit="ChangePassword">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col">
                <div class="mb-3">
                    <label for="password">New Password</label>
                    <InputText id="password" @bind-Value="request.Password" class="form-control" type="password" />
                </div>
            </div>
            <div class="col">
                <div class="mb-3">
                    <label for="confirmPassword">Confirm New Password</label>
                    <InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
                </div>
            </div>
        </div>

        <div style="display: flex; justify-content: space-between">
            <button type="submit" class="btn btn-primary" disabled="@(!context.Validate())">Submit</button>
            <button type="button" class="btn btn-outline-warning" @onclick="ReturnToProfilePage">Cancel</button>
        </div>
        <ValidationSummary />
    </EditForm>
</div>

@code {
    UserChangePassword request = new UserChangePassword();

    private async Task ChangePassword()
    {
        var result = await AuthService.ChangePassword(request);
        Toaster.Success("Password has been changed. Login again.");
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("login");
    }

    private async Task ReturnToProfilePage()
    {
        NavigationManager.NavigateTo("profile");
    }
}
